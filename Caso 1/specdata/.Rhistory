while(z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)
x <- c(x,z)
if(moneda==1){ #caminata aleatoria
z <- z + 1
} else {
z <- z -1
}
}
if(z>10){
w <- w +1
}
}
#print(x)
#plot(x, type= "o")
paste("En",intentos,"intentos se sale",w,"veces por arriba y",intentos-w,"veces por abajo")
w <- 0
intentos <-100
x <- vector("numeric")
for(i in 1:intentos){
z <- 6.5
while(z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)
x <- c(x,z)
if(moneda==1){ #caminata aleatoria
z <- z + 1
} else {
z <- z -1
}
}
if(z>10){
w <- w +1
}
}
#print(x)
#plot(x, type= "o")
paste("En",intentos,"intentos se sale",w,"veces por arriba y",intentos-w,"veces por abajo")
w <- 0
intentos <-100
x <- vector("numeric")
for(i in 1:intentos){
z <- 6.5
while(z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)
x <- c(x,z)
if(moneda==1){ #caminata aleatoria
z <- z + 1
} else {
z <- z -1
}
}
if(z>10){
w <- w +1
}
}
#print(x)
#plot(x, type= "o")
paste("En",intentos,"intentos se sale",w,"veces por arriba y",intentos-w,"veces por abajo")
w <- 0
intentos <-100
x <- vector("numeric")
for(i in 1:intentos){
z <- 6.5
while(z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)
x <- c(x,z)
if(moneda==1){ #caminata aleatoria
z <- z + 1
} else {
z <- z -1
}
}
if(z>10){
w <- w +1
}
}
#print(x)
#plot(x, type= "o")
paste("En",intentos,"intentos se sale",w,"veces por arriba y",intentos-w,"veces por abajo")
w <- 0
intentos <-100
x <- vector("numeric")
for(i in 1:intentos){
z <- 6.5
while(z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)
x <- c(x,z)
if(moneda==1){ #caminata aleatoria
z <- z + 1
} else {
z <- z -1
}
}
if(z>10){
w <- w +1
}
}
#print(x)
#plot(x, type= "o")
paste("En",intentos,"intentos se sale",w,"veces por arriba y",intentos-w,"veces por abajo")
w <- 0
intentos <-100
x <- vector("numeric")
for(i in 1:intentos){
z <- 6.5
while(z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)
x <- c(x,z)
if(moneda==1){ #caminata aleatoria
z <- z + 1
} else {
z <- z -1
}
}
if(z>10){
w <- w +1
}
}
#print(x)
#plot(x, type= "o")
paste("En",intentos,"intentos se sale",w,"veces por arriba y",intentos-w,"veces por abajo")
w <- 0
intentos <-100
x <- vector("numeric")
for(i in 1:intentos){
z <- 6.5
while(z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)
x <- c(x,z)
if(moneda==1){ #caminata aleatoria
z <- z + 1
} else {
z <- z -1
}
}
if(z>10){
w <- w +1
}
}
#print(x)
#plot(x, type= "o")
paste("En",intentos,"intentos se sale",w,"veces por arriba y",intentos-w,"veces por abajo")
w <- 0
intentos <-100
x <- vector("numeric")
for(i in 1:intentos){
z <- 6.5
while(z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)
x <- c(x,z)
if(moneda==1){ #caminata aleatoria
z <- z + 1
} else {
z <- z -1
}
}
if(z>10){
w <- w +1
}
}
#print(x)
#plot(x, type= "o")
paste("En",intentos,"intentos se sale",w,"veces por arriba y",intentos-w,"veces por abajo")
plot(x)
plot(x,type="o")
w <- 0
intentos <-100
x <- vector("numeric")
for(i in 1:intentos){
z <- 6.5
while(z>=3 && z<=10){
moneda <- rbinom(1,1,0.5)
x <- c(x,z)
if(moneda==1){ #caminata aleatoria
z <- z + 1
} else {
z <- z -1
}
}
if(z>10){
w <- w +1
}
}
#print(x)
#plot(x, type= "o")
paste("En",intentos,"intentos se sale",w,"veces por arriba y",intentos-w,"veces por abajo")
plot(x,type="o")
i <- 0
repeat{
i <- i+ 1
print(paste("Número:",i))
if(i>= 1000) break
}
#Scooping rules
lm
lm <- function(x){x*x}
rm(lm)
lm
#Scooping rules
lm
lm <- function(x){x*x}
rm(lm)
lm
lm #regresion lineal
lm <- function(x){x*x}
lm
rm(lm)
lm
lm #regresion lineal
lm <- function(x){x*x}
lm(3)
library(swirl)
install.packages(swirl)
install.packages("swirl")
library("swirl")
library("swirl")
library("swirl")
library("swirl")
library(swirl)
library("swirl")
library("swirl")
library("swirl")
library("swirl")
library("swirl")
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
#Entorno: collección de variable, pares... ¿?
hacer.potencia <- function(n){
potencia <- function(x){
x^n
}
potencia
}
x <- 2
hacer.potencia(4)
n <- 3
x <- 2
hacer.potencia()
a <- hacer.potencia(3)
a
hacer.potencia <- function(n){
potencia <- function(x){
x^n
}
potencia
}
y <- 10
f <- function(x){
y <- 2
y^2 + g(x)
}
g <- function(x){
x*y
}
f(3)
search(y)
search(10)
search("y")
search()
x <- as.Date("1970-01-01")
x
unclass(x)
x <- as.Date("1970-02-01")
x
unclass(x)
unclass(as.Date("1970-01-02"))
unclass(as.Date("1970-01-00"))
unclass(as.Date("1970-01-01"))
unclass(as.Date("2018-04-01"))
unclass(as.Date("2018-04-01")) - unclass(as.Date("1939-09-10"))
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1939-09-10"))
unclass(as.Date("2018-04-01")) + unclass(as.Date("1939-09-10"))
a < - 6551/365
a
a <- 6551/365
a
today <- unclass(as.Date("2018-04-01"))
WWII <- unclass(as.Date("1939-09-01"))
a <- today - WWII
a
b <- 28702/365
b
b <- 1939+78.63
b
WWII
weekdays("1995-04-08")
weekdays(as.Date("1995-04-08"))
weekdays(as.Date("2000-01-01"))
weekdays(as.Date("0-0-0"))
weekdays(as.Date("0-0-01"))
weekdays(as.Date("0000-01-01"))
weekdays(as.Date("0001-01-01"))
weekdays(as.Date("0002-01-01"))
weekdays(as.Date("0003-01-01"))
weekdays(as.Date("0000-01-01"))
weekdays(as.Date("0001-01-01"))
weekdays(as.Date("0000-02-28"))
weekdays(as.Date("0000-02-29"))
month(as.Date("1521-08-10"))
months(as.Date("1521-08-10"))
quarters(as.Date("1521-08-10"))
weeksdays(as.Date("1996-04-10"))
a <- as.POSIXct("1996-04-10") #lista
b <- as.POSIXlt("1996-04-10") #base de datos
rdom(1,1,0.5)
rnorm(1,1,0.5)
rnorm(10,1,0.5)
nción
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5. 1:5. 2)
noise(1:5, 1:5, 2)
?mapply
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10) #generate levels #genera 10 niveles que cada uno se repit 3 veces
f #no lo hace como número sino como factores
tapply(x,f,mean)
tapply(x,f,mean, simplify = FALSE)
#function(x, f, drop = FALSE, ...)
#x: vector, lista o data frame
x <- c(rnorm(10), runif(10), rexp(10))
x
f <- gl(3,10)
f
split(x,f)
library(datasets)
head(airquality)
split(airquality, airquality$Month)
airquality$Month
sapply(split(airquality, airquality$Month),colMeans,na.rm = TRUE)
?na.rm
?"na.rm"
?na.action
ColMeans(airquality, na.rm = T)
colMeans(airquality, na.rm = T)
sapply(split(airquality, airquality$Month),colMeans,na.rm = TRUE)[1:4,1:5]
sapply(split(airquality, airquality$Month),colMeans,na.rm = TRUE)[1:5,1:5]
library(mtcars)
library(mtkars)
library(ntcars)
library(mtcars)
dataframe.mtcars)
dataframe.mtcars
data.frame(mtcars)
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)[3:3]
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)[3, ]
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)[4, ]
split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)
split(data.frame(mtcars), data.frame(mtcars)$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
options(error=recover)
read.csv("Utopia")
options(error=recover)
read.csv("Utopia")
stop()
#SIMULACIÓN
summary(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
summary(m)
m
airquality
s <- split(airquality, airquality$Month)
s
str(s)
rnorm(100,50)
runif(100,1,50)
plot(x,y)
x <- rnorm(100,50)
y <- runif(100,1,50)
plot(x,y)
plot(x)
x <- rnorm(100,50)
plot(x)
plot(y)
x <- rnorm(10)
x
y <- rnorm(10, 50, 5)
y
summary(x)
summary(y)
plot(x)
plot(y)
plot(x,y)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library("ggplot2")
a <- rnorm(100,10)
plot(a)
80/14
90/14
mediacontaminante <- function(directorio, contaminante, id){
setwd(directorio)
name <- paste("Monitor", substr(list.files()[1],start = 1,stop = 3))
c <- read.csv(list.files()[1])[contaminante] #contaminante en monitor i(1)
mc <- as.matrix(mean(c[!is.na(c)])) #media del contaminante en monitor i(1)
rownames(mc)[1] <- name
for (i in 2:332){
name <- paste("Monitor", substr(list.files()[i],start = 1,stop = 3))
c <- read.csv(list.files()[i])[contaminante]
mc2 <- as.matrix(mean(c[!is.na(c)]))
if (!is.nan(mc2) == TRUE){
rownames(mc2)[1] <- name
mc <- rbind(mc, mc2) #media de n monitores
}else{
mc2 <- paste("Any value of", contaminante, "registered")
mc2 <- as.matrix(mc2)
rownames(mc2)[1] <- name
mc <- rbind(mc, mc2)
}
}
mc <- mc[id,]
mc <- as.matrix(mc)
colnames(mc) <- contaminante
mc
}
x <- "C:/Users/Brando Alberto/Documents/GitHub/Software-Actuarial-III/Caso 1/specdata"
y <- "sulfate" #sulfate|nitrate
z <- 1:10 #332
mediacontaminante(x,y,z)
y <- "nitrate" #sulfate|nitrate
mean(mediacontaminante(x,y,z))
mediacontaminante(x,y,z)
z <- 23 #332
mediacontaminante(x,y,z)
#completos
completos <- function(directorio, id){
setwd(directorio)
name <- paste("Monitor", substr(list.files()[1],start = 1,stop = 3))
a <- read.csv(list.files()[1]) #monitor i(1)
a <- (!is.na(a$sulfate)) & (!is.na(a$nitrate)) #casos completos
a <- sum(a) #nobs
nobs <- data.frame(matrix(c(name, a), nrow = 1)) #se convierte en dataframe
for (i in 2:332){
name <- paste("Monitor", substr(list.files()[i],start = 1,stop = 3))
a <- read.csv(list.files()[i]) #monitor i(1)
a <- (!is.na(a$sulfate)) & (!is.na(a$nitrate)) #casos completos
a <- sum(a)
nobs2 <- data.frame(matrix(c(name, a), nrow = 1))
nobs <- rbind(nobs, nobs2) #unión de data frames
}
nobs <- nobs[id, ]
colnames(nobs)[1] = "id"
colnames(nobs)[2] = "nobs"
nobs
}
x <- "C:/Users/Brando Alberto/Documents/GitHub/Software-Actuarial-III/Caso 1/specdata"
y = 1:10 #332
completos(x,y)
xx <- c(1:100)
xx[c(12:30)]
y = 1 #332
y = 1 #332
completos(x,y)
y = c(2,4,8,10,12) #332
completos(x,y)
y = 30:25 #332
completos(x,y)
#correlación
corr <- function(directorio, horizonte){
setwd(directorio)
if(horizonte == 0){
c(0)
} else {
total <- Inf - Inf
for(i in 1:332){
name <- paste("Monitor", substr(list.files()[i],start = 1,stop = 3))
a <- read.csv(list.files()[i]) #monitor i(1)
a <- (!is.na(a$sulfate)) & (!is.na(a$nitrate)) #casos completos
h <- sum(a) #horizonte
if(h>=horizonte && is.nan(total)){
s <- read.csv(list.files()[i])[a, ][ ,"sulfate"]
n <- read.csv(list.files()[i])[a, ][ ,"nitrate"]
a <- cor(s,n) #
names(a)[1] = name
total <- a
names(total)[length(total)] = name
}else if(h>=horizonte){
s <- read.csv(list.files()[i])[a, ][ ,"sulfate"]
n <- read.csv(list.files()[i])[a, ][ ,"nitrate"]
a <- cor(s,n) #
total <- c(total,a)
names(total)[length(total)] = name
}else{
}
}
total
}
}
x <- "C:/Users/Brando Alberto/Documents/GitHub/Software-Actuarial-III/Caso 1/specdata"
y = 0
corr(x,y)
x <- "C:/Users/Brando Alberto/Documents/GitHub/Software-Actuarial-III/Caso 1/specdata"
y = 100
corr(x,y)
y = 150
cr <- cprr(x,y)
cr <- corr(x,y)
head(cr)
hist(cr)
cr2 <- corr(x,5000)
cr2
