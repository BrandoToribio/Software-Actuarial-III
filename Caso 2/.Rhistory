b <- as.POSIXlt("1996-04-10") #base de datos
rdom(1,1,0.5)
rnorm(1,1,0.5)
rnorm(10,1,0.5)
nción
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5. 1:5. 2)
noise(1:5, 1:5, 2)
?mapply
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10) #generate levels #genera 10 niveles que cada uno se repit 3 veces
f #no lo hace como número sino como factores
tapply(x,f,mean)
tapply(x,f,mean, simplify = FALSE)
#function(x, f, drop = FALSE, ...)
#x: vector, lista o data frame
x <- c(rnorm(10), runif(10), rexp(10))
x
f <- gl(3,10)
f
split(x,f)
library(datasets)
head(airquality)
split(airquality, airquality$Month)
airquality$Month
sapply(split(airquality, airquality$Month),colMeans,na.rm = TRUE)
?na.rm
?"na.rm"
?na.action
ColMeans(airquality, na.rm = T)
colMeans(airquality, na.rm = T)
sapply(split(airquality, airquality$Month),colMeans,na.rm = TRUE)[1:4,1:5]
sapply(split(airquality, airquality$Month),colMeans,na.rm = TRUE)[1:5,1:5]
library(mtcars)
library(mtkars)
library(ntcars)
library(mtcars)
dataframe.mtcars)
dataframe.mtcars
data.frame(mtcars)
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)[3:3]
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)[3, ]
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)[4, ]
split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)
split(data.frame(mtcars), data.frame(mtcars)$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
options(error=recover)
read.csv("Utopia")
options(error=recover)
read.csv("Utopia")
stop()
#SIMULACIÓN
summary(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
summary(m)
m
airquality
s <- split(airquality, airquality$Month)
s
str(s)
rnorm(100,50)
runif(100,1,50)
plot(x,y)
x <- rnorm(100,50)
y <- runif(100,1,50)
plot(x,y)
plot(x)
x <- rnorm(100,50)
plot(x)
plot(y)
x <- rnorm(10)
x
y <- rnorm(10, 50, 5)
y
summary(x)
summary(y)
plot(x)
plot(y)
plot(x,y)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library("ggplot2")
a <- rnorm(100,10)
plot(a)
80/14
90/14
getwd()
fechadescarga <- date()
fechadescarga
install.packages("XML")
library(XML)
url <- "http://www.w3schools.com/xml/simple.xml"
data <- xmlElements
url <- "http://www.w3schools.com/xml/simple.xml"
data <- xmlTreeParse(url,useInternalNodes = TRUE)
url <- "http://www.w3schools.com/xml/simple.xml"
data <- xmlTreeParse(url,useInternalNodes = TRUE)
url <- "https://medlineplus.gov/xml/mplus_topics_2018-05-11.xml"
data <- xmlTreeParse(url,useInternalNodes = TRUE)
url <- "https://medlineplus.gov/xml/mplus_topic_groups_2018-05-11.xml"
data <- xmlTreeParse(url,useInternalNodes = TRUE)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData$name
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris
head(catmyjson)
head(cat(myjson))
head(cat(myjson),3)
head(cat(myjson),1)
iris2 <- fromJSON(myjson)
head(iris2)
head(iris)
library(data.table)
install.packages("data.table")
library(data.table)
DF = data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
DT[2,]
DT[DT$y == "a",]
DT[c(2,3)]
DT[,c(2,3)]
{
x = 1
y = 2
}
k = {print(10);5}
print(k)
k = {print("hola");5}
print(k)
DT[,list(mean(x),sum(z))]
DT[,table(y)]
table(y)
table(6)
table(3:8)
DT[,w:=z^2]
DT
DT2 <- DT
DT[,y:=2]
DT
head(DT)
head(DT2)
DT1 <- data.table(x=c('a','a','b','dt1'),y=1:4)
library(data.table)
DT1 <- data.table(x=c('a','a','b','dt1'),y=1:4)
DT2 <- data.table(x=c('a','b','dt2'),z=5:7)
DT1
DT2
setkey(DT1,x);setkey(DT2,x)
merge(DT1,DT2)
DT1
a <- setkey(DT1,x)
a
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
dbDisconnect(uCSCDb)
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
dbDisconnect(ucscDb)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",
host="genome-mysql.cse.ucsc.edu")
tablas <- dbListTables(hg19)
length(tablas)
tablas[1:3]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
head(affyData)
uery <- dbSendQuery(hg19, "select * from affyU133Plus2
where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
query <- dbSendQuery(hg19, "select * from affyU133Plus2
where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
query <- dbSendQuery(hg19, "select * from affyU133Plus2
where misMatches between 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2
where misMatches between 1 and 3")
dbDisconnect(hg19)
table(head(mejor))
#################### MEJOR ####################
setwd("C:/Users/Brando Alberto/Documents/GitHub/Software-Actuarial-III/Caso 2")
outcome <- read.csv("outcome-of-care-measures.csv")
estado <- "AL"
resultado <- "ataque"
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
mejor <- as.data.frame(split(outcome[,c(2,7,resultado)], outcome[,7])[estado])
class(mejor)
head(mejor)
head(mejor[,3])
head(as.vector(mejor[,3]))
head(as.vector(mejor[,3],colclasses = "numeric"))
?as.vector()
head(as.numeric(mejor[,3]))
as.numeric(mejor[,3])
as.numeric(as.vector(mejor[,3]))
!is.na(as.numeric(as.vector(mejor[,3])))
mejor[!is.na(as.numeric(as.vector(mejor[,3]))),]
mejor <- mejor[!is.na(as.numeric(as.vector(mejor[,3]))),]
class(mejor)
mejor
length(mejor)
nrow(mejor)
a <- c(1:199)
max(a)
mejor <- as.data.frame(mejor[!is.na(as.numeric(as.vector(mejor[,3]))),])
mejor
mejor2 <- as.data.frame(mejor[!is.na(as.numeric(as.vector(mejor[,3]))),])
mejor2
mejor <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
mejor <- mejor[!is.na(as.numeric(as.vector(mejor[,2]))),]
mejor
max(mejor[,2])
max(as.vector(mejor[,2]))
sort(a)
sort(a, decreasing = TRUE)
sort(mejor)
sort(mejor[,2])
sort(mejor[,2], decreasing = FALSE)
mejor <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
mejor <- mejor[!is.na(as.numeric(as.vector(mejor[,2]))),]
summary(mejor)
class(mejor)
unclass(mejor)
mejor <- as.matrix(mejor[1,3])
mejor
mejor <- as.matrix(mejor[1,3])
mejor <- as.data(mejor[15,1])
mejor <- mejor[15,1]
mejor
mejor <- as.character(mejor[15,1])
as.character(mejor)
match(a,3)
a <- matrix(1:24)
a
a <- matrix(1:24, nrow = 4)
a
match(a,14)
which.max(a)
mejor <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
mejor <- mejor[!is.na(as.numeric(as.vector(mejor[,2]))),]
estado <- "AL"
resultado <- "ataque"
mejor <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
outcome <- read.csv("outcome-of-care-measures.csv")
mejor <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
mejor <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
mejor <- mejor[!is.na(as.numeric(as.vector(mejor[,2]))),]
mejor2 <- 0
nrow(mejor)
mejor
as.numeric("a")
"a" > "b"
"A" > "b"
"c" > "b"
1 > "b"
3 > "b"
("zz" > "b")
("zz" > "z")
("xx" > "z")
("z" > "z")
("ZZ" > "Z")
("Z" > "Z")
("z" > "Z")
("X" > "Z")
("ZZ" < "Z")
("ZZ" < A)
A <- "ZZ"
("ZZ" < A)
("Z" < A)
B <- 100
B <- 1e100
B
B <- 1e10
B
B <- 1e2
B
B
B <- 1e3
B
B
B <- 1e100
B + 1
B + 1
B + 12
B * 2
substr("HOLAS AMIGO",1,2)
substr("HOLAS AMIGO",1,1)
substr("HOLAS AMIGO",1)
substr("HOLAS AMIGO",1,1)
"ZZ" >= "ZZ"
function("AZ","ataque")
mejor("AZ","ataque")
mejor <- function(estado, resultado){
# Lectura de datos
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
#Proceso de comparación
print("Hola mundo")
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
}
mejor("H","ataque")
mejor("H","ataqu")
estado <- "AL"
resultado <- "ataque"
mejor <- function(estado, resultado){
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
####VALIDAAAAAAAAAAAAAAAAAAAAR PARA ESTADO#
#Proceso de comparación
best <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
best <- best[!is.na(as.numeric(as.vector(best[,2]))),]
A <- "ZZ"
B <- 1e100
for (i in nrow(best)){
if(best[i,2]==B & substr(best[i,1],1,1)<A){
A <- best[i,1]
} else if(best[i,2]==B & substr(best[i,1],1,1)>=A){
} else if(best[i,2]<B & substr(best[i,1],1,1)<A){
A <- best[i,1]
} else {
}
}
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
as.character(A)
}
best("TX","ataque")
mejor("TX","ataque")
mejor <- function(estado, resultado){
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
####VALIDAAAAAAAAAAAAAAAAAAAAR PARA ESTADO#
#Proceso de comparación
best <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
best <- best[!is.na(as.numeric(as.vector(best[,2]))),]
A <- "ZZ"
B <- 1e100
for (i in nrow(best)){
if((best[i,2]==B) & (substr(best[i,1],1,1)<A)){
A <- best[i,1]
} else if((best[i,2]==B) & (substr(best[i,1],1,1)>=A)){
} else if((best[i,2]<B) & (substr(best[i,1],1,1)<A)){
A <- best[i,1]
} else {
}
}
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
as.character(A)
}
mejor("TX","ataque")
mejor <- function(estado, resultado){
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
####VALIDAAAAAAAAAAAAAAAAAAAAR PARA ESTADO#
#Proceso de comparación
best <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
best <- best[!is.na(as.numeric(as.vector(best[,2]))),]
A <- "ZZ"
B <- 1e100
for (i in nrow(best)){
if((as.numeric(best[i,2])==B) & (substr(best[i,1],1,1)<A)){
A <- best[i,1]
} else if((as.numeric(best[i,2])==B) & (substr(best[i,1],1,1)>=A)){
} else if((as.numeric(best[i,2])<B) & (substr(best[i,1],1,1)<A)){
A <- best[i,1]
} else {
}
}
mejor("TX","ataque")
mejor("TX","ataque")
mejor("TX","ataque")
mejor <- function(estado, resultado){
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
####VALIDAAAAAAAAAAAAAAAAAAAAR PARA ESTADO#
#Proceso de comparación
best <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
best <- best[!is.na(as.numeric(as.vector(best[,2]))),]
A <- "ZZ"
B <- 1e100
for (i in nrow(best)){
if((as.numeric(best[i,2])==B) & (substr(best[i,1],1,1)<A)){
A <- best[i,1]
} else if((as.numeric(best[i,2])==B) & (substr(best[i,1],1,1)>=A)){
} else if((as.numeric(best[i,2])<B) & (substr(best[i,1],1,1)<A)){
A <- best[i,1]
} else {
}
}
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
print(as.character(A))
}
mejor("TX","ataque")
estado <- "AL"
resultado <- "ataque"
#mejor <- function(estado, resultado){
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
#mejor <- function(estado, resultado){
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
outcome <- read.csv("outcome-of-care-measures.csv")
#####Outcome#####
#2. Hospital Name: varchar (50) Lists the name of the hospital.
#7. State: varchar (2) Lists the 2 letter State code in which...
#11. Hospital 30-Day Death (Mortality) Rates from Heart Attack...
#17. Hospital 30-Day Death (Mortality) Rates from Heart Failure...
#23. Hospital 30-Day Death (Mortality) Rates from Pneumonia...
1
#####Outcome#####
#2. Hospital Name: varchar (50) Lists the name of the hospital.
#7. State: varchar (2) Lists the 2 letter State code in which...
#11. Hospital 30-Day Death (Mortality) Rates from Heart Attack...
#17. Hospital 30-Day Death (Mortality) Rates from Heart Failure...
#23. Hospital 30-Day Death (Mortality) Rates from Pneumonia...
1 + 3
#####Outcome#####
#2. Hospital Name: varchar (50) Lists the name of the hospital.
#7. State: varchar (2) Lists the 2 letter State code in which...
#11. Hospital 30-Day Death (Mortality) Rates from Heart Attack...
#17. Hospital 30-Day Death (Mortality) Rates from Heart Failure...
#23. Hospital 30-Day Death (Mortality) Rates from Pneumonia...
print("HEY")
print("HEY")
print("HEY")
