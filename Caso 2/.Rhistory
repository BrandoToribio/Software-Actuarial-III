lm <- function(x){x*x}
lm(3)
library(swirl)
install.packages(swirl)
install.packages("swirl")
library("swirl")
library("swirl")
library("swirl")
library("swirl")
library(swirl)
library("swirl")
library("swirl")
library("swirl")
library("swirl")
library("swirl")
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
#Entorno: collección de variable, pares... ¿?
hacer.potencia <- function(n){
potencia <- function(x){
x^n
}
potencia
}
x <- 2
hacer.potencia(4)
n <- 3
x <- 2
hacer.potencia()
a <- hacer.potencia(3)
a
hacer.potencia <- function(n){
potencia <- function(x){
x^n
}
potencia
}
y <- 10
f <- function(x){
y <- 2
y^2 + g(x)
}
g <- function(x){
x*y
}
f(3)
search(y)
search(10)
search("y")
search()
x <- as.Date("1970-01-01")
x
unclass(x)
x <- as.Date("1970-02-01")
x
unclass(x)
unclass(as.Date("1970-01-02"))
unclass(as.Date("1970-01-00"))
unclass(as.Date("1970-01-01"))
unclass(as.Date("2018-04-01"))
unclass(as.Date("2018-04-01")) - unclass(as.Date("1939-09-10"))
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1939-09-10"))
unclass(as.Date("2018-04-01")) + unclass(as.Date("1939-09-10"))
a < - 6551/365
a
a <- 6551/365
a
today <- unclass(as.Date("2018-04-01"))
WWII <- unclass(as.Date("1939-09-01"))
a <- today - WWII
a
b <- 28702/365
b
b <- 1939+78.63
b
WWII
weekdays("1995-04-08")
weekdays(as.Date("1995-04-08"))
weekdays(as.Date("2000-01-01"))
weekdays(as.Date("0-0-0"))
weekdays(as.Date("0-0-01"))
weekdays(as.Date("0000-01-01"))
weekdays(as.Date("0001-01-01"))
weekdays(as.Date("0002-01-01"))
weekdays(as.Date("0003-01-01"))
weekdays(as.Date("0000-01-01"))
weekdays(as.Date("0001-01-01"))
weekdays(as.Date("0000-02-28"))
weekdays(as.Date("0000-02-29"))
month(as.Date("1521-08-10"))
months(as.Date("1521-08-10"))
quarters(as.Date("1521-08-10"))
weeksdays(as.Date("1996-04-10"))
a <- as.POSIXct("1996-04-10") #lista
b <- as.POSIXlt("1996-04-10") #base de datos
rdom(1,1,0.5)
rnorm(1,1,0.5)
rnorm(10,1,0.5)
nción
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(5, 1, 2)
noise(1:5. 1:5. 2)
noise(1:5, 1:5, 2)
?mapply
str(tapply)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10) #generate levels #genera 10 niveles que cada uno se repit 3 veces
f #no lo hace como número sino como factores
tapply(x,f,mean)
tapply(x,f,mean, simplify = FALSE)
#function(x, f, drop = FALSE, ...)
#x: vector, lista o data frame
x <- c(rnorm(10), runif(10), rexp(10))
x
f <- gl(3,10)
f
split(x,f)
library(datasets)
head(airquality)
split(airquality, airquality$Month)
airquality$Month
sapply(split(airquality, airquality$Month),colMeans,na.rm = TRUE)
?na.rm
?"na.rm"
?na.action
ColMeans(airquality, na.rm = T)
colMeans(airquality, na.rm = T)
sapply(split(airquality, airquality$Month),colMeans,na.rm = TRUE)[1:4,1:5]
sapply(split(airquality, airquality$Month),colMeans,na.rm = TRUE)[1:5,1:5]
library(mtcars)
library(mtkars)
library(ntcars)
library(mtcars)
dataframe.mtcars)
dataframe.mtcars
data.frame(mtcars)
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)[3:3]
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)[3, ]
sapply(split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)[4, ]
split(data.frame(mtcars), data.frame(mtcars)$cyl),colMeans,na.rm = TRUE)
split(data.frame(mtcars), data.frame(mtcars)$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
options(error=recover)
read.csv("Utopia")
options(error=recover)
read.csv("Utopia")
stop()
#SIMULACIÓN
summary(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
summary(m)
m
airquality
s <- split(airquality, airquality$Month)
s
str(s)
rnorm(100,50)
runif(100,1,50)
plot(x,y)
x <- rnorm(100,50)
y <- runif(100,1,50)
plot(x,y)
plot(x)
x <- rnorm(100,50)
plot(x)
plot(y)
x <- rnorm(10)
x
y <- rnorm(10, 50, 5)
y
summary(x)
summary(y)
plot(x)
plot(y)
plot(x,y)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library("ggplot2")
a <- rnorm(100,10)
plot(a)
80/14
90/14
getwd()
fechadescarga <- date()
fechadescarga
install.packages("XML")
library(XML)
url <- "http://www.w3schools.com/xml/simple.xml"
data <- xmlElements
url <- "http://www.w3schools.com/xml/simple.xml"
data <- xmlTreeParse(url,useInternalNodes = TRUE)
url <- "http://www.w3schools.com/xml/simple.xml"
data <- xmlTreeParse(url,useInternalNodes = TRUE)
url <- "https://medlineplus.gov/xml/mplus_topics_2018-05-11.xml"
data <- xmlTreeParse(url,useInternalNodes = TRUE)
url <- "https://medlineplus.gov/xml/mplus_topic_groups_2018-05-11.xml"
data <- xmlTreeParse(url,useInternalNodes = TRUE)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData$name
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris
head(catmyjson)
head(cat(myjson))
head(cat(myjson),3)
head(cat(myjson),1)
iris2 <- fromJSON(myjson)
head(iris2)
head(iris)
library(data.table)
install.packages("data.table")
library(data.table)
DF = data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT = data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
DT[2,]
DT[DT$y == "a",]
DT[c(2,3)]
DT[,c(2,3)]
{
x = 1
y = 2
}
k = {print(10);5}
print(k)
k = {print("hola");5}
print(k)
DT[,list(mean(x),sum(z))]
DT[,table(y)]
table(y)
table(6)
table(3:8)
DT[,w:=z^2]
DT
DT2 <- DT
DT[,y:=2]
DT
head(DT)
head(DT2)
DT1 <- data.table(x=c('a','a','b','dt1'),y=1:4)
library(data.table)
DT1 <- data.table(x=c('a','a','b','dt1'),y=1:4)
DT2 <- data.table(x=c('a','b','dt2'),z=5:7)
DT1
DT2
setkey(DT1,x);setkey(DT2,x)
merge(DT1,DT2)
DT1
a <- setkey(DT1,x)
a
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
dbDisconnect(uCSCDb)
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
dbDisconnect(ucscDb)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",
host="genome-mysql.cse.ucsc.edu")
tablas <- dbListTables(hg19)
length(tablas)
tablas[1:3]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
head(affyData)
uery <- dbSendQuery(hg19, "select * from affyU133Plus2
where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
query <- dbSendQuery(hg19, "select * from affyU133Plus2
where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
query <- dbSendQuery(hg19, "select * from affyU133Plus2
where misMatches between 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2
where misMatches between 1 and 3")
dbDisconnect(hg19)
table(head(mejor))
a <- c("hola","estaba viendo","tren","adios")
b <- c(4,2,1,3)
c <- data.frame(A = a, B = b)
c
order(a,b)
c[order(a,b),]
a <- c("hola","estaba viendo","tren","adios")
b <- c(4,2,3,3)
c <- data.frame(A = a, B = b)
c
c <- data.frame(A = a, B = b)
c
c[order(a,b),]
c[order(b,a),]
estado <- "TX"
resultado <- "falla"
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
setwd("C:/Users/Brando Alberto/Documents/GitHub/Software-Actuarial-III/Caso 2")
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
best <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
orden1 <- c(as.numeric(paste(best[,2])))
orden2 <- c(paste(best[,2]))
best <- best[order(orden1,orden2),]
head(best)
orden1 <- c(as.numeric(paste(best[,2])))
orden2 <- c(paste(best[,2]))
best <- best[order(orden1,-orden2),]
c(as.numeric(paste(best[,2])))
c(paste(best[,2]))
orden1 <- c(as.numeric(paste(best[,2])))
orden2 <- c(paste(best[,1]))
best <- best[order(orden1,orden2),]
head(best)
tail(best)
best
orden <- !is.na(c(as.numeric(paste(best[,2]))))
best <- best[orden,]
best
nrow(best)
NA
setwd("C:/Users/Brando Alberto/Documents/GitHub/Software-Actuarial-III/Caso 2")
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
estado <- "TX"
resultado <- "falla" #ataque #falla #neumonia
num <- 4
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
if(!is.element(estado,outcome[,7])){
stop("Estado inválido")
}
best <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
orden1 <- c(as.numeric(paste(best[,2])))
orden2 <- c(paste(best[,1]))
orden1 <- suppressWarnings(c(as.numeric(paste(best[,2]))))
orden2 <- c(paste(best[,1]))
best <- best[order(orden1,orden2),]
orden <- !is.na(c(as.numeric(paste(best[,2]))))
orden <- suppressWarnings(!is.na(c(as.numeric(paste(best[,2])))))
best <- best[orden,]
best
best[1,1]
print(best[1,1])
as.character(best[1,1])
nrow(best)
as.character(best[nrow(best),1])
as.character(best[num,1])
rankhospital <- function(estado, resultado, num = "best") {
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
if(!is.element(estado,outcome[,7])){
stop("Estado inválido")
}
#Proceso de reordenamiento
best <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
orden1 <- suppressWarnings(c(as.numeric(paste(best[,2]))))
orden2 <- c(paste(best[,1]))
best <- best[order(orden1,orden2),]
orden <- suppressWarnings(!is.na(c(as.numeric(paste(best[,2])))))
best <- best[orden,]
# Regresa el nombre del hospital con el puesto dado
if ((is.numeric(num)=TRUE)&(num<=nrow(best))){
as.character(best[num,1])
} else if ((is.numeric(num)=TRUE)&(num>nrow(best))){
NA
} else if (num == "mejor"){
as.character(best[1,1])
} else if (num == "peor"){
as.character(best[nrow(best),1])
} else {
stop("Rank inválido")
}
}
estado <- "TX"
resultado <- "falla" #ataque #falla #neumonia
num <- 4
rankhospital(estado, resultado, num)
rankhospital <- function(estado, resultado, num = "best") {
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
if(!is.element(estado,outcome[,7])){
stop("Estado inválido")
}
#Proceso de reordenamiento
best <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
orden1 <- suppressWarnings(c(as.numeric(paste(best[,2]))))
orden2 <- c(paste(best[,1]))
best <- best[order(orden1,orden2),]
orden <- suppressWarnings(!is.na(c(as.numeric(paste(best[,2])))))
best <- best[orden,]
# Regresa el nombre del hospital con el puesto dado
if ((is.numeric(num)==TRUE)&(num<=nrow(best))){
as.character(best[num,1])
} else if ((is.numeric(num)==TRUE)&(num>nrow(best))){
NA
} else if (num == "mejor"){
as.character(best[1,1])
} else if (num == "peor"){
as.character(best[nrow(best),1])
} else {
stop("Rank inválido")
}
}
rankhospital(estado, resultado, num)
estado <- "MD"
resultado <- "ataque" #ataque #falla #neumonia
num <- "peor" #mejor #peor
rankhospital(estado, resultado, num)
estado <- "MN"
resultado <- "ataque" #ataque #falla #neumonia
num <- 5000 #mejor #peor
rankhospital(estado, resultado, num)
mejor <- function(estado, resultado){
# Lectura de datos
outcome <- read.csv("outcome-of-care-measures.csv")
# Revisión de la validez de estado y resultado
if (resultado == "ataque"){
resultado <- 11
} else if (resultado == "falla") {
resultado <- 17
} else if (resultado == "neumonia"){
resultado <- 23
} else {
stop("Resultado inválido")
}
if(!is.element(estado,outcome[,7])){
stop("Estado inválido")
}
#Proceso de comparación
best <- as.data.frame(split(outcome[,c(2,resultado)], outcome[,7])[estado])
best <- suppressWarnings(best[!is.na(as.numeric(as.vector(best[,2]))),])
A <- "ZZ"
B <- 1e10
i <- 284
for (i in 1:nrow(best)){
if((as.numeric(as.vector(best[i,2]))==B) & (as.character(best[i,1])<A)){
A <- as.character(best[i,1])
B <- as.numeric(as.vector(best[i,2]))
} else if((as.numeric(as.vector(best[i,2]))==B) & (as.character(best[i,1])>=A)){
} else if(as.numeric(as.vector(best[i,2]))<B){
A <- as.character(best[i,1])
B <- as.numeric(as.vector(best[i,2]))
} else {
}
}
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
print(A)
}
estado <- "TX"
resultado <- "ataque" #ataque #falla #neumonia
mejor(estado, resultado)
