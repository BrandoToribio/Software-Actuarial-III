names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","names")]
vect[c("foo","bar")]
bye()
a <- 3
class(a)
class(vect)
class(c("a","1"))
b <- 4
a !== b
a != b
a ==n
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
z, 555, z
c(z, 555, z)
z * * 100
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?":"
seq(1, 20)
seq(0, 10, by = 0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
play()
seq(length = length(my_seq))
nxt()
seq_along(my_seq)
rep(0, times = 40)
play()
seq(by = 3, length = 10)
seq(by = 3, length = 2)
seq(1:10,by = 3, length = 2)
seq(1:10,by = 3, length = 10)
seq(1:10,by = 3, length = 20)
seq(1:10,by = 3, length = 1)
seq(1:10,by = 3, length = 3)
seq(1:10,by = 3, length = 2)
seq(1:10,by = 3, length = 1)
seq(1:10,by = 3, length = 4)
seq(1:10,by = 3)
seq(5, 10, by = 3)
seq(5, 10, by = 3, length = 10)
seq(5, 10, by = 3)
nxt()
rep(c(0, 1, 2), times = 10)
play()
seq(c(0,1),c(2,3))
nxt()
rep(c(0,1,2), each = 10)
bye()
swirl()
c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Brando")
my_name <- c(my_char, "Brando")
my_name
paste(my_name)
paste(my_name, collapse = " ")
paste("Hello","world!", sep = " ")
paste(c("X","Y","Z"), sep = "")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x* 3
?rnorm
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
my_data < 0/0
Inf- Inf
0/0
0/0 * 3
(0/0) + 1
(0/0) > 1
swirl()
bye()
swirl()
x
bye()
swirl()
x
x[1:10]
x[is.na(x)]
x == is.na(x)
y <- x[!is.na(x)]
y
y[y>0]
x[x > 0]
x[is.na(z) & x >0]
x[is.na(x) & x >0]
x[!is.na(x) & x >0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
matrix(1:9, byrow = TRUE, nrow = 2)
x <- c(1,3,4)
sum(x)
a <- matrix(1:9, byrow = TRUE, nrow = 3)
a
rownames(a) <- c(1, 2, 3)
a
colnames(a) <- c("A","B","C")
a
names(a)
rownames(a)
colnames(a)
b <- c(10,11,12)
b
c <- cbind(a,b)
c
class(c)
e <- c("13","14","15")
f <- cbind(c,e)
f
class(f)
as.numeric(f)
f * c
f*2
c*2
cbind(c,f)
cbind(c,f)[A]
cbind(c,f)[1]
cbind(c,f)[4]
cbind(c,f)[12]
a <- matrix(1:9, nrow=3, byrow = TRUE)
b <- matrix(1:16, nrow = 4, byrow = TRUE)
cbind(a,b)
cbind(b,a)
ls()
# Box office Star Wars (in millions!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
# Create box_office
box_office <- c(new_hope, empire_strikes, return_jedi)
# Construct star_wars_matrix
star_wars_matrix <- matrix(box_office, nrow = 3, byrow = TRUE)
star_wars_matrix
region <- c("US", "non-US")
titles <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
rownames(star_wars_matrix) <- titles
colnames(star_wars_matrix) <- region
star_wars_matrix
rowSums(star_wars_matrix)
colSums(star_wars_matrix)
star_wars_matrix[3]
star_wars_matrix[6]
star_wars_matrix[7]
a
b
a <- c(1:4)
a
cbind(star_wars_matrix, a)
a <- c(1,2,3,4)
a[3,4]
a <- matrix(1:9, "a", 10, "b", nrows = 3)
a <- matrix(1:9, "a", 10, "b", nrow = 3)
a <- matrix(1:9, 100, 10, 200, nrow = 3)
a <- matrix(100, nrow = 3)
a
a <- matrix(1:8,100, nrow = 3)
a
a <- matrix((1:8,100), nrow = 3)
a <- matrix(1:8, 100, byrow = TRUE nrow = 3)
a <- matrix(1:8, 100, byrow = TRUE, nrow = 3)
a <- matrix(1:9, byrow = TRUE, nrow = 3)
b <- matrix(100, nrow = 3)
cbind(a,b)
swirl()
my_vectos <- c(1:20)
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
plya()
play()
length(my_vector)
nxt
nxt()
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4)
identical(my_matrix, my_matrix2)
play()
my_matrix2
my_matrix
nxt()
patients <- c("Bill","Gina","Kelly")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
play()
a <- matrix(1:9, nrow = 3)
b <- matrix(1:4, nrow = 2)
a
b
cbind(a,b)
rbind(a,b)
b <- c(1:4)
cbind(a,b)
b <- c(1,2)
cbind(a,b)
nxt()
my_data
class(my_data)
cnames <- c("age","weight","bp","rating","test")
cnames <- c("age", "weight", "bp", "rating", "test")
cnames <- c("patient", age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 = 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE °| c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6!= 8 && 4>3.9
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 ==6, !FALSE)
ints <- sample(10)
play()
identical(xo,"xo")
xo <- 2
identical(xo,"xo")
xo <- "xo"
identical(xo,"xo")
nxt()
ints
play()
sample(2)
sample(5)
sample(3:10)
sample(4:15, 100)
?sample
sample(3:19, size = 50)
rnorm(3)
sample(3:19, size = 10)
rnorm(3:19, 50)
rnorm(1:15, mean = 10)
rnorm(1:15, mean = 10, sd = 1)
rnorm(1:15, mean = 10, sd = 5)
rnorm(1:15, mean = 10, sd = 10)
nxt()
ints > 5
which(ints > 7)
any(ints < 0)
all( ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
submit()
submit()
length(my_vector)
submit()
submit()
submit()
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
play()
floor(1.1)
roof(1.3)
ceil(1.4)
?floor
ceiling(1.3)
trunc(10.3)
round(10.345)
round(10.345,4)
round(10.345,1)
signif(10.3948859309543029)
nxxt()
nxt()
submit()
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(standardGeneric, c(1.4, 3.6, 7.9, 8.8))
evaluate(deviance
, c(1.4, 3.6, 7.9, 8.8))
?"standad deviation"
evaluate(rnorm(), c(1.4, 3.6, 7.9, 8.8))
evaluate(rnorm, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Ya","mero","acabo")
submit()
mad_libs("Mexico","savage","Esparza's monument")
submit()
"I" %p% "love" %p% "R!"
x <- 3
if(x != 3){
y <- x*10
y
}else{
y <- x
y
}
plot(c(1,3,13.2,1))
x <- c("a","b","c","d")
print (seq_along(x))
#El operador ":" me permite generar secuenciaas númericas de k a n
w <- 3:14.7
w
data.frame(1:9)
data.frame(1:9, nrow = 2)
1/0
exp(-Inf)
Inf - Inf
attributes(w)
w <- c(3:14.7)
attributes(w)
w
m <- matrix(1:6,2,3,T)
m
dim(m)
attributes(m)
x <-1:3
y <-10:12
x
y
cbind(x,y)
rbind(x,y)
a <- rbind(x,y)
rownames(a) <- c("a","b","c")
rownames(a) <- c("a","b")
colnames(a) <- c("A","B","C")
a
print(a)
identical(a,m)
#Factores
#Se utilizan para representar datos categóricos. Pueden estar ordenados o no
#Es como si fuera un vector de enteros y cada uno de ellos con una etiqueta
x <- factor(c("Si","Si","No","No","Si"))
x
x <- factor(c("Azul","Verde","Verde","Azul","Rojo"))
x
table(x)
table(c(1:10))
unclass(x)
is.na(x)
is.nan(x)
y <- c(1,2,NaN,10,3)
is.na(y)
is.nan(y)
x <- c(1,2,NA,10,3)
is.na(x) #valor faltante detectado
is.nan(x)
is.na(NaN)
is.nan(na)
is.nan(NA)
x <- data.frame(foo = 1:4, bar = c(T,T,F,F))
x
x <- list(a=1,b=2,c=3)
x
x <- list(1:9)
x
x <- list(1, "a", TRUE, 3 + 2i, 5L, 1:50)
x
m <- matrix(NA,2,3)
m
x <-1:3
y <-10:14
#CBind, unir columnas
cbind(x,y)
x <- factor(c("Si","Si","No","No","Si"))
x
unclass(x)
x <- data.frame(foo = 1:4, bar = c(T,T,F,F))
x
row.names(x) <- c("A","B","C","D","E")
row.names(x) <- c("A","B","C","D")
x
con <- url("https://www.fcfm.buap.mx/")
con
x <- readLines(con,7)
x
x <- c("a","b","c","d","e")
x[1]
x[1:4]
x[x>"b"]
u <- x == "c"
u
x[u]
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con,7)
x
writeLines(readLines(con),"FCFM.txt")
x
writeLines(readLines(con),"FCFM.txt")
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con,7)
x
writeLines(readLines(con),"FCFM.txt")
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con,7)
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con,7)
x
writeLines(readLines(con),"FCFM.txt")
?writeLines
x
dput(x,FCFM.txt)
dget(x, FCFM.txt)
dget(FCFM.txt, x)
dput(x, FCFM.txt)
dput(FCFM.txt, x)
x <- dget("https://www.fcfm.buap.mx/")
x <- dget(url = "https://www.fcfm.buap.mx/")
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con,7)
x
writeLines(readLines(con),"FCFM.txt")
setwd("~/Github/Software-Actuarial-III")
writeLines(x,"FCFM.html")
con <- url("https://www.fcfm.buap.mx/")
x <- readLines(con,7)
x
writeLines(readLines(con),"FCFM.txt")
a <- c(1:100)
dput(a, a.TXT)
dput(a, a.txt)
dput(a.txt, a)
dput(a, "a.txt")
a
dget(b, "B.txt")
dget("B.txt")
b <- dget("B.txt")
dget("B.txt")
dget(b, "B.txt")
dget(b, "B.txt")
dget("B.txt")
b <- dget("B.txt")
